/**
 * JavaCC file
 */
 
options {
  JDK_VERSION = "1.6";
  STATIC = false;
}
PARSER_BEGIN(JCCMinijavaParser)
package parser;

import ast.*;
import java.util.ArrayList;
import java.util.List;

public class JCCMinijavaParser {
}

PARSER_END(JCCMinijavaParser)

SKIP :
{
 	" "
|	"\r"
|	"\t"
|	"\n"
|	< MULTI_LINE_COMMENT: "/*" (~["*"])* "*" ("*" | ~["*","/"] (~["*"])* "*")* "/" >
|   < SINGLE_LINE_COMMENT: "//" (~["\n"])* >
|   < #NOT_STAR_SLASH: ~["*"] | "*" ~["/"] >
}

TOKEN : /* KEYWORDS */
{	< RETURN: 		"return" >
| 	< INT:			"int" >
| 	< BOOLEAN: 		"boolean" >
|   < CLASS:        "class" >
|   < PUBLIC:       "public" >
|   < STATIC:       "static" >
|   < VOID:         "void" >
|   < MAIN:         "main" >
|   < STRING:       "String" >
|   < EXTENDS:      "extends" >
|   < IF:           "if" >
|   < ELSE:         "else" >
|   < WHILE:        "while" >
|   < SYSOUTPRINT:  "System.out.println" >
|   < LENGTH:       "length" >
|   < TRUE:         "true" >
|   < FALSE:        "false" >
|   < NEW:          "new" >
|   < THIS:         "this" >
}
TOKEN : /* SEPARATORS and OPERATORS*/
{	<LPAREN: "(">
|	<RPAREN: ")">
|	<LBRACE: "{">
|	<RBRACE: "}">
|	<ASSIGN: "=">
|	<QUESTION:	 "?">
|	<PLUS:	 "+" >
|	<MINUS:  "-" >
|	<MULT:   "*" >
|	<SMALLER:"<">
|	<NOT:	 "!">
| 	<COLON:	 ":" >
| 	<COMMA:	"," >
| 	<SEMICOLON:	 ";" >
|   <LBRACKET:  "[" >
|   <RBRACKET:  "]" >
|   <DOT:       "." >
|   <AND:       "&&" >
}
	
TOKEN :
{   < INTEGER_LITERAL: ( <DIGIT> )+ >
|   < IDENTIFIER: <LETTER> (<LETTER> | "_" | <DIGIT>)* >
|   < #LETTER: ["A" - "Z", "a" - "z"] >
|   < #DIGIT: ["0" - "9"] >
}

/* Old Program code,
// Nothing says we need to include it
Program Program() : {
	NodeList<AST> ss = new NodeList<AST>();
	Statement s;
	FunctionDecl f;
	Expression e;
}
{
	( s=Statement()
		{ ss.add(s); }
    | f=FunctionDeclaration()
		{ ss.add(f); }
	)*
	< PRINT > e = Expression()
	<EOF>
	{ return new Program(ss, new Print(e)); }
}
*/

Program Program() : {
	MainClass main;
	NodeList<ClassDecl> cList = new NodeList<ClassDecl>();
	ClassDecl c;
}
{
	main = MainClass()
	( c = ClassDeclaration() {cList.add(c);} )*
	<EOF>
	{ return new Program(main, cList); }
}

MainClass MainClass() : {
    String className;
    String argName;
    Statement statement;
}
{
    <CLASS>
    className = Identifier()
    <LBRACE> <PUBLIC> <STATIC> <VOID> <MAIN>
        <LPAREN>
            <STRING> <LBRACKET> <RBRACKET> argName = Identifier()
        <RPAREN>
        <LBRACE>
            statement = Statement()
        <RBRACE>
    <RBRACE>
    { return new MainClass(className, argName, statement); }
}

ClassDecl ClassDeclaration() : {
    String name;
    String superName = null;
    NodeList<VarDecl> vars = new NodeList<VarDecl>();
    NodeList<MethodDecl> methods = new NodeList<MethodDecl>();
    VarDecl v;
    MethodDecl m;
}
{
    <CLASS> name = Identifier()
    ( <EXTENDS> superName = Identifier() )?
    <LBRACE>
    ( v = FieldVarDeclaration() { vars.add(v); } )*
    ( m = MethodDeclaration() { methods.add(m); } )*
    <RBRACE>
    { return new ClassDecl(name, superName, vars, methods); }
}

VarDecl FieldVarDeclaration() : {
    Type type;
    String name;
}
{
    type = Type()
    name = Identifier()
    <SEMICOLON>
    { return new VarDecl(VarDecl.Kind.FIELD, type, name, 0); }
}

VarDecl LocalVarDeclaration() : {
    Type type;
    String name;
}
{
    type = Type()
    name = Identifier()
    <SEMICOLON>
    { return new VarDecl(VarDecl.Kind.LOCAL, type, name, 0); }
}

/* Old Program Code
FunctionDecl FunctionDeclaration() : {
	Type rt;
	String i;
	List<VarDecl> formals;
	List<Statement> stats = new ArrayList<Statement>();
	Statement s;
	Expression re;
} 
{	rt=Type() i=Identifier() "(" formals=FormalList() ")" "{" 
	    (
	    	s=Statement()					{ stats.add(s); }
	    )* 
	    "return" re=Expression() ";" 
	 "}"
	 { return new FunctionDecl(rt, i, formals, stats, re); }
}
*/

MethodDecl MethodDeclaration() : {
    Type returnType;
    String name;
    List<VarDecl> formals;
    NodeList<VarDecl> vars = new NodeList<VarDecl>();
    NodeList<Statement> statements = new NodeList<Statement>();
    Expression returnExp;
    VarDecl local;
    Statement s;
}
{
    <PUBLIC> returnType = Type() name = Identifier()
    <LPAREN>
    formals = FormalList()
    <RPAREN>
    <LBRACE>
        //Lookahead of 2 probably needed since var declaration and statement have a common prefix
        ( LOOKAHEAD(2) local = LocalVarDeclaration() {vars.add(local); } )*
        ( s = Statement() { statements.add(s); } )*
        <RETURN> returnExp = Expression() <SEMICOLON>
    <RBRACE>
    { return new MethodDecl(returnType, name, new NodeList<VarDecl>(formals), vars, statements, returnExp); }
}

List<VarDecl> FormalList() : {
	List<VarDecl> formals = new ArrayList<VarDecl>();
	Type t;
	String n;
}
{	( t=Type() n=Identifier() 			{ formals.add(new VarDecl(t,n, formals.size())); }
		(	
			"," t=Type() n=Identifier()	{ formals.add(new VarDecl(t,n, formals.size())); }
		)* 
	)?
	{ return formals; }
}

Type Type() : {
	Type t;
	String name;
}
{
( LOOKAHEAD(2)
 "int" "[" "]"         { t = new IntArrayType(); }
|"int"					{ t = new IntegerType(); }
| "boolean"				{ t = new BooleanType(); }
| name = Identifier()   { t = new ObjectType(name); }
)						{ return t; }
}

Statement Statement() : {
	Statement s = null; //TODO: should not be null ever!
}
{
(
s=Assign()
| s = Block()
| s = If()
| s = While()
| s = Print()
)	{ return s; }
}

Statement Block() : {
    NodeList<Statement> statements = new NodeList<Statement>();
    Statement s;
}
{
    <LBRACE>
    ( s = Statement() { statements.add(s); } )*
    <RBRACE>
    { return new Block(statements); }
}

Statement If() : {
    Statement s;
    Expression tst;
    Statement thn;
    Statement els;
}
{
    <IF>
    <LPAREN>
    tst = Expression()
    <RPAREN>
    thn = Statement()
    <ELSE>
    els = Statement()
    { return new If(tst, thn, els); }
}

Statement While() : {
    Expression tst;
    Statement body;
}
{
    <WHILE>
    <LPAREN>
    tst = Expression()
    <RPAREN>
    body = Statement()
    { return new While(tst, body); }
}

Statement Print() : {
    Expression e;
}
{
    <SYSOUTPRINT> <LPAREN> e = Expression() <RPAREN> <SEMICOLON>
    { return new Print(e); }
}

Statement Assign() : {
	String name;
	Expression value, index;
}
{	name=Identifier() 
	( "=" value=Expression() ";"
		{return new Assign(name, value); }
    | <LBRACKET> index = Expression() <RBRACKET> <ASSIGN> value = Expression() <SEMICOLON>
        {return new ArrayAssign(name, index, value); }
    )
}

/* Old Program Code
Expression Expression() : {
	Expression e, e2, e3;
}
{	e=CompExpression() 
	( "?" e2 = Expression()
	  ":" e3 = Expression()
		{	e = new Conditional(e, e2, e3); }
	)?
	{ return e; }
}
*/

Expression Expression() : {
    Expression e, e2;
}
{
    e = CompExpression()
    ( LOOKAHEAD(2) <AND> e2 = Expression() { e = new And(e, e2); } )*
    { return e; }
}

// For parsing anything with priority same or higher than <
Expression CompExpression() : {
	Expression e, e2;
}
{ 	e=AddExpression() 
	( "<" e2=AddExpression() 
		{ e = new LessThan(e, e2); }
	)?
	{ return e; }
}
// For parsing anything with priority same or higher than +
Expression AddExpression() : {
	Expression e, e2;
	Token op;
}
{	e=MultExpression() 
	( 	(op="+"|op="-") 
		e2=MultExpression() 
			{ if (op.image.equals("+"))
				e=new Plus(e, e2);
			  else
			  	e=new Minus(e, e2);
			}	
	)*
	{ return e; }
}

// For parsing anything with priority same or higher than *
Expression MultExpression() :  {
	Expression e, e2;
}
{	e=NotExpression() 
	(	"*" e2=NotExpression()
			{ e = new Times(e, e2); } 
	)*
	{ return e; }
}

// For parsing anything with priority same or higher than ! expressions:
Expression NotExpression() : {
    Expression e;
}
{ 	"!" e=NotExpression()
		{ return new Not(e); }
| 	e=CallExpression()
		{ return e; }
}

Expression CallExpression() :{
    String i;
	Expression e, e2;
	NodeList<Expression> el;
}
{
	e = PrimaryExpression()
		( <LBRACKET> e2 = Expression() <RBRACKET> { e = new ArrayLookup(e, e2); }
        |  <DOT>
            (<LENGTH> { e = new ArrayLength(e); }
            | i=Identifier() <LPAREN> el=ExpressionList() <RPAREN> { e = new Call(e, i, el); }
            )
		)*
		{ return e; }
}
/*
"(" el=ExpressionList() ")"
				{ e = new Call(i, el); }
	    |
*/
/* PrimaryExpression is the expression that has highest precedence.*/
Expression PrimaryExpression() : {
	Token t;
	String i;
	Expression e, e2;
	NodeList<Expression> el;
}
{ t=<INTEGER_LITERAL>   { return new IntegerLiteral(t.image); }
| t=<TRUE>              { return new BooleanLiteral(true); }
| t=<FALSE>             { return new BooleanLiteral(false); }
| t=<THIS>              { return new This(); }
| i=Identifier()        { return new IdentifierExp(i); }
| "(" e=Expression() ")"				{ return e; }
| LOOKAHEAD(2) <NEW> <INT> <LBRACKET> e = Expression() <RBRACKET> { return new NewArray(e); }
| <NEW> i=Identifier() <LPAREN> <RPAREN> { return new NewObject(i); }
}

NodeList<Expression> ExpressionList() : {
	List<Expression> el = new ArrayList<Expression>();
	Expression e;
}
{
	( 
		e=Expression() 			{ el.add(e); }
		(
			"," e=Expression()	{ el.add(e); }
		)* 
	)?
	{ return new NodeList<Expression>(el); }
}

String Identifier() : {
	Token i;
}
{
	i = <IDENTIFIER>
	{ return i.image; }
}
